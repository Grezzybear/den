version: '3.3'

services:
  # for protonvpn
  proton:
    image: qmcgaw/gluetun
    container_name: proton
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      - 6881:6881 # qbittorrent
      - 6881:6881/udp # qbittorrent
      - 8085:8085 # qbittorrent
      - 9696:9696 # prowlarr
      - 8191:8191 # flaresolverr
      - 8989:8989 # sonarr
      - 7878:7878 # radarr
      - 8787:8787 # readarr
      - 8686:8686 # lidarr
      - 6767:6767 # bazarr
      - 5299:5299 # lazylibrarian
      - 8092:80 # speed test tracker
      - 8008:8000 # vpn control server
    volumes:
      - ${BASE}/config/proton:/gluetun
    networks:
      - media-network
      - homepage-network
    env_file:
      - .env.secret # holds the end point and keys
    environment:
      - DNS_ADDRESS=127.0.0.11 # necessary as this is dockers dns address and by default it will set to 127.0.0.1 which wont resolve container names
      - VPN_SERVICE_PROVIDER=protonvpn
      - VPN_TYPE=wireguard
      - PUID=10101
      - PGID=10000
      - WIREGUARD_ADDRESSES=10.2.0.2/32
      - TZ=${TZ}
      - UMASK=002
      # - SERVER_COUNTRIES= # add countries here
      # - SERVER_CITIES= # add cities here
      # Server list updater
      # See https://github.com/qdm12/gluetun-wiki/blob/main/setup/servers.md#update-the-vpn-servers-list
      - UPDATER_PERIOD=24h
# tracks the speed through protonvpn
  speedtest-tracker:
    image: lscr.io/linuxserver/speedtest-tracker:latest
    container_name: speedtest-tracker-proton
    environment:
      - PUID=10102
      - PGID=10000
      - TZ=${TZ}
      - APP_KEY=${SPEEDTESTKEY} # generate a key here: https://speedtest-tracker.dev
      - DB_CONNECTION=sqlite
      - SPEEDTEST_SCHEDULE=*/15 * * * * # every 15 minutes
#      - SPEEDTEST_SERVERS=
#      - DB_HOST= #optional
#      - DB_PORT= #optional
#      - DB_DATABASE= #optional
#      - DB_USERNAME= #optional
#      - DB_PASSWORD= #optional
      - DISPLAY_TIMEZONE=${TZ} #optional
      - PRUNE_RESULTS_OLDER_THAN=0 #optional
    volumes:
      - ${BASE}/config/speedtesttracker:/config
    depends_on:
      proton:
        condition: service_healthy
    network_mode: "service:proton"
    restart: unless-stopped
    
  # requests you a port with protonvpn and goes into qbittorrent and adds it as the torrenting port so you can properly upload
  qbittorrent-natmap:
    # https://github.com/soxfor/qbittorrent-natmap
    image: ghcr.io/soxfor/qbittorrent-natmap:latest
    container_name: qbittorrent-natmap
    user: 10103:10000
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=Etc/UTC
      - QBITTORRENT_SERVER=10.2.0.2
      - QBITTORRENT_PORT=8085
      - QBITTORRENT_USER=${QBITUN}
      - QBITTORRENT_PASS=${QBITPW}
      # - VPN_GATEWAY=
      - VPN_CT_NAME=proton
      # - VPN_IF_NAME=tun0
      # - CHECK_INTERVAL=300
      # - NAT_LEASE_LIFETIME=300
    network_mode: "service:proton"
    depends_on:
      qbittorrent:
        condition: service_started
      proton:
        condition: service_healthy
        
  # for downloading torrents
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=10104
      - PGID=10000
      - TZ=${TZ}
      - UMASK=002
      - WEBUI_PORT=8085
      - TORRENTING_PORT=6881
    volumes:
      - ${BASE}/config/qbittorrent:/config
      - MediaStorage:/data
    restart: unless-stopped
    depends_on:
      proton:
        condition: service_healthy
    network_mode: "service:proton"

# jellyfin stats db
  jellystat-db:
    image: postgres:15.2
    container_name: jellystat-db
    environment:
      POSTGRES_DB: 'jfstat'
      POSTGRES_USER: ${JELLYSTATUN}
      POSTGRES_PASSWORD: ${JELLYSTATPW}
    volumes:
    - ${BASE}/config/jellystat-db:/var/lib/postgresql/data # Mounting the volume

# jellyfin stats
  jellystat:
    image: cyfershepard/jellystat:latest
    container_name: jellystat
    user: 10106:10000
    environment:
      POSTGRES_USER: ${JELLYSTATUN}
      POSTGRES_PASSWORD: ${JELLYSTATPW}
      POSTGRES_IP: jellystat-db
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      TZ: ${TZ}
    ports:
      - 3010:3000 #Server Port
    volumes:
      - ${BASE}/config/jellystat:/app/backend/backup-data # Mounting the volume
    depends_on:
      - jellystat-db
    restart: unless-stopped

  # for media requests
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    user: 10107:10000
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
      - UMASK=002
      - PUID=10005
      - PGID=10000
    ports:
      - 5055:5055
    volumes:
      - ${BASE}/config/jellyseerr:/app/config
    networks:
      - media-network
      - nginx-network
      - homepage-network
    restart: unless-stopped

  # for index management
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=10108
      - PGID=10000
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${BASE}/config/prowlarr:/config
    restart: unless-stopped
    depends_on:
      proton:
        condition: service_healthy
    network_mode: "service:proton"

  # indexer proxy
  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    user: 10109:10000
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - PUID=10109
      - PGID=10000
      - TZ=${TZ}
      - UMASK=002
    depends_on: 
      proton:
        condition: service_healthy
    network_mode: "service:proton"
    restart: unless-stopped

  # for tv
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=10110
      - PGID=10000
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${BASE}/config/sonarr:/config
      - MediaStorage:/data
    restart: unless-stopped
    depends_on:
      proton:
        condition: service_healthy
    network_mode: "service:proton"

  # for movies
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=10111
      - PGID=10000
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${BASE}/config/radarr:/config
      - MediaStorage:/data
    restart: unless-stopped
    depends_on:
      proton:
        condition: service_healthy
    network_mode: "service:proton"

  # for books
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=10112
      - PGID=10000
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${BASE}/config/readarr:/config
      - MediaStorage:/data
    restart: unless-stopped
    depends_on:
      proton:
        condition: service_healthy
    network_mode: "service:proton"

  # for music
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=10113
      - PGID=10000
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${BASE}/config/lidarr:/config
      - MediaStorage:/data
    restart: unless-stopped
    depends_on:
      proton:
        condition: service_healthy
    network_mode: "service:proton"

  # for subtitles
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=10114
      - PGID=10000
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${BASE}/config/bazarr:/config
      - MediaStorage:/data
    restart: unless-stopped
    depends_on:
      proton:
        condition: service_healthy
    network_mode: "service:proton"

  # for book metadata
  lazylibrarian:
    image: lscr.io/linuxserver/lazylibrarian:latest
    container_name: lazylibrarian
    environment:
      - PUID=10115
      - PGID=10000
      - TZ=${TZ}
      - UMASK=002
      - DOCKER_MODS=linuxserver/mods:lazylibrarian-ffmpeg #optional
    volumes:
      - ${BASE}/config/lazylibrarian:/config
      - MediaLibrary:/data
    restart: unless-stopped
    depends_on:
      proton:
        condition: service_healthy
    network_mode: "service:proton"

  # for rss feeds
  freshrss:
    image: lscr.io/linuxserver/freshrss:latest
    container_name: freshrss
    environment:
      - PUID=10116
      - PGID=10000
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${BASE}/config/freshrss:/config
    ports:
      - 8080:80
    restart: unless-stopped

volumes:
  MediaStorage:
    name: MediaStorage
    external: true
  MediaLibrary:
    name: MediaLibrary
    external: true
  MediaAudiobooks:
    name: MediaAudiobooks
    external: true
  MediaPodcasts:
    name: MediaPodcasts
    external: true
  MediaAudiobooksMetadata:
    name: MediaAudiobooksMetadata
    external: true
  MediaMusic:
    name: MediaMusic
    external: true

networks:
  default:
  nginx-network:
    external: true
    name: nginx-network
  media-network:
    external: true
    name: media-network
  homepage-network:
    external: true
    name: homepage-network
